name: Trigger deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        type: string
        required: true
        default: tst
      PRODUCT_GROUP_NAME:
        description: 'Product group name'
        type: string
        required: true
    secrets:
      JIRA_TOKEN:
        required: true
      DEPLOY_GITHUB_TOKEN:
        required: true
      JIRA_TOKEN_1808:
        required: true

env:
  GH_TOKEN: ${{ secrets.JIRA_TOKEN_1808 }}

jobs:
  prepare-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get-changes
        id: get-changes
        run: |
          paths=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.before }} ${{ github.event.after }} | grep deployment.conf)
          matrix="{\"definition\":[]}"
          for file in $(echo $paths); do
              account_name=$(echo $file | cut -d "/" -f2)
              stack_name=$(echo $file | cut -d "/" -f3)
              # strange formatting because of GH parsing error
              definition=$(cat << JSON
              {
                "accountName": "$account_name",
                "stackName": "$stack_name"
              }
          JSON
          )
            echo "Definition: $definition"
            definition=$(echo $definition | sed -r 's/( )+//g')
            matrix=$( echo $matrix | jq -c --argjson definition "$definition" '.definition += [$definition]')
          done
          if [[ $( echo $matrix | jq '.definition | has(0)' ) == "true" ]]; then
            echo "Definition to run: $matrix"
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          else
            echo "No definitions to run"
            echo "matrix=none" >> $GITHUB_OUTPUT
          fi
    outputs:
      matrix: ${{ steps.get-changes.outputs.matrix }}

  link-to-jira:
    needs: [prepare-inputs]
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Login
        uses: atlassian/gajira-login@v2.0.0
        env:
          JIRA_BASE_URL: https://vladys.atlassian.net
          JIRA_USER_EMAIL: valdo564@azet.sk
          JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}
      - name: Find Jira issue in commit messages
        id: find_jira_issue
        uses: atlassian/gajira-find-issue-key@master
        with:
          from: commits
      - name: Change Jira status
        run: |
          echo "Ticket je ${{ steps.find_jira_issue.outputs.issue }}"
          if [[ ${{ steps.find_jira_issue.outputs.issue }} == CCDESK* ]];
            then
              transition_id=1
          elif [[ ${{ steps.find_jira_issue.outputs.issue }} == VLAD* ]];
            then
              transition_id=31
          fi
          echo "transition id je $transition_id"
          
          curl --request POST \
          --url 'https://vladys.atlassian.net/rest/api/3/issue/${{ steps.find_jira_issue.outputs.issue }}/transitions' \
          --user 'valdo564@azet.sk:${{ secrets.JIRA_TOKEN }}' \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --data '{
            "transition": {
              "id": "'$transition_id'"
              }
            }' -o jira_output.log
          if [ -s jira_output.log ]
            then
              echo "Jira status not changed, check error message"
              cat jira_output.log
              exit 1
            else
              echo "Jira status changed successfully"
          fi
    outputs:
      jiraIssue: ${{ steps.find_jira_issue.outputs.issue }}

  find_open_pull_requests:
    needs: link-to-jira
    runs-on: ubuntu-latest
    steps:
      - name: Find Pull Requests
        id: search_prs
        shell: bash
        run: |          
          curl -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.JIRA_TOKEN_1808 }}" \
          'https://api.github.com/search/issues?q=is:pr+is:open+label:${{ needs.link-to-jira.outputs.jiraIssue }}+user:vjancich' > github_response.json
          open_prs=$(cat github_response.json | jq '.total_count')
          printf "Opened PRs count: $open_prs \n"
          repos=$(cat github_response.json | jq ".items | .[] | select(.repository_url | contains(\"${{ inputs.PRODUCT_GROUP_NAME }}\")) | .repository_url" | sed 's/"//g' | sed s/"https:\/\/api.github.com\/repos\/"//)
          matrix2="{\"definition2\":[]}"
          
          for file in $(echo $repos); do
            repo_name=$(echo $file)
            pr_number=$(cat github_response.json | jq ".items | .[] | select(.repository_url | contains(\"${{ inputs.PRODUCT_GROUP_NAME }}\")) | .number")
            # strange formatting because of GH parsing error
            definition2=$(cat << JSON
            {
              "repoName": "$repo_name",
              "prNumber": "$pr_number"
            }
          JSON
          )
          
            echo "Definition: $definition2"
            definition2=$(echo $definition2 | sed -r 's/( )+//g')
            matrix2=$( echo $matrix2 | jq -c --argjson definition2 "$definition2" '.definition2 += [$definition2]')
          done
          if [[ $( echo $matrix2 | jq '.definition2 | has(0)' ) == "true" ]]; then
            echo "Definition to run: $matrix2"
            echo "matrix2=$matrix2" >> $GITHUB_OUTPUT
          else
            echo "No definitions to run"
            echo "matrix2=none" >> $GITHUB_OUTPUT
          fi
    outputs:
      matrix2: ${{ steps.search_prs.outputs.matrix2 }}

  merge_pull_requests:
    needs: [find_open_pull_requests]
    if: needs.find_open_pull_requests.outputs.matrix2 != 'none'
    name: 'Merging PR: ${{ matrix2.definition2.repoName }}/${{ matrix2.definition2.prNumber }}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find_open_pull_requests.outputs.matrix2) }}
    steps:
      - name: Merge Pull Request
        id: parse_repo
        run: |
          REPO=${{ matrix2.definition2.repoName }}
          PR_NUMBER=${{ matrix2.definition2.prNumber }}
          echo $REPO
          echo $PR_NUMBER
          echo "::set-output name=repository::${REPO}"
          echo "::set-output name=pr_number::${PR_NUMBER}"
      - name: Checkout Configuration repository sources
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.parse_repo.outputs.repository }}
          token: ${{ secrets.JIRA_TOKEN_1808 }}
          fetch-depth: 0
      - name: Merge PR
        run: |
          gh pr merge ${{ steps.parse_repo.outputs.pr_number }} -s --delete-branch

  deploy:
    needs: [prepare-inputs,merge_pull_requests]
    if: |
      always() && 
      needs.prepare-inputs.outputs.matrix != 'none' && 
      ( needs.merge_pull_requests.result == 'success' || needs.merge_pull_requests.result == 'skipped' )
    name: 'Starting deployment for: ${{ matrix.definition.accountName }}/${{ matrix.definition.stackName }}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-inputs.outputs.matrix) }}
    uses: vjancich/shared/.github/workflows/deployment-cfg.yml@main
    with:
      environment: ${{ inputs.environment }}
      account_name: ${{ matrix.definition.accountName }}
      stack_name: ${{ matrix.definition.stackName }}
      PRODUCT_GROUP_NAME: ${{ inputs.PRODUCT_GROUP_NAME }}
    secrets: inherit
