name: Trigger deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        type: string
        required: true
        default: tst
      PRODUCT_GROUP_NAME:
        description: 'Product group name'
        type: string
        required: true
    secrets:
      JIRA_TOKEN:
        required: true
      DEPLOY_GITHUB_TOKEN:
        required: true
      JIRA_TOKEN_1808:
        required: true

env:
  GH_TOKEN: ${{ secrets.JIRA_TOKEN_1808 }}

jobs:
  prepare-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get-changes
        id: get-changes
        run: |
          paths=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.before }} ${{ github.event.after }} | grep deployment.conf)
          matrix="{\"definition\":[]}"
          for file in $(echo $paths); do
              account_name=$(echo $file | cut -d "/" -f2)
              stack_name=$(echo $file | cut -d "/" -f3)
              # strange formatting because of GH parsing error
              definition=$(cat << JSON
              {
                "accountName": "$account_name",
                "stackName": "$stack_name"
              }
          JSON
          )
            echo "Definition: $definition"
            definition=$(echo $definition | sed -r 's/( )+//g')
            matrix=$( echo $matrix | jq -c --argjson definition "$definition" '.definition += [$definition]')
          done
          if [[ $( echo $matrix | jq '.definition | has(0)' ) == "true" ]]; then
            echo "Definition to run: $matrix"
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          else
            echo "No definitions to run"
            echo "matrix=none" >> $GITHUB_OUTPUT
          fi
    outputs:
      matrix: ${{ steps.get-changes.outputs.matrix }}

  link-to-jira:
    needs: [prepare-inputs]
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Login
        uses: atlassian/gajira-login@v2.0.0
        env:
          JIRA_BASE_URL: https://vladys.atlassian.net
          JIRA_USER_EMAIL: valdo564@azet.sk
          JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}
      - name: Find Jira issue in commit messages
        id: find_jira_issue
        uses: atlassian/gajira-find-issue-key@master
        with:
          from: commits
      - name: Change Jira status
        run: |
          echo "Ticket je ${{ steps.find_jira_issue.outputs.issue }}"
          if [[ ${{ steps.find_jira_issue.outputs.issue }} == CCDESK* ]];
            then
              transition_id=1
          elif [[ ${{ steps.find_jira_issue.outputs.issue }} == VLAD* ]];
            then
              transition_id=31
          fi
          echo "transition id je $transition_id"
          
          curl --request POST \
          --url 'https://vladys.atlassian.net/rest/api/3/issue/${{ steps.find_jira_issue.outputs.issue }}/transitions' \
          --user 'valdo564@azet.sk:${{ secrets.JIRA_TOKEN }}' \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --data '{
            "transition": {
              "id": "'$transition_id'"
              }
            }' -o jira_output.log
          if [ -s jira_output.log ]
            then
              echo "Jira status not changed, check error message"
              cat jira_output.log
              exit 1
            else
              echo "Jira status changed successfully"
          fi
    outputs:
      jiraIssue: ${{ steps.find_jira_issue.outputs.issue }}

  find_open_pull_requests:
    needs: link-to-jira
    runs-on: ubuntu-latest
    steps:
      - name: Find Pull Requests
        id: search_prs
        shell: bash
        run: |          
          curl -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.JIRA_TOKEN_1808 }}" \
          'https://api.github.com/search/issues?q=is:pr+is:open+label:${{ needs.link-to-jira.outputs.jiraIssue }}+user:vjancich' > github_response.json
          open_prs=$(cat github_response.json | jq '.total_count')
          printf "Opened PRs count: $open_prs \n"

          if [ $open_prs != 0 ];
            then
              pr_repo_url=$(cat github_response.json | jq '.items' | jq '.[].repository_url' | sed 's/"//g' | sed 's/"//g' | sed s/"https:\/\/api.github.com\/repos\/"//)
              pr_repo_url_array=($(echo $pr_repo_url | tr "," "\n"))
              pr_repo_number=$(cat github_response.json | jq '.items' | jq '.[].number')
              pr_repo_number_array=($(echo $pr_repo_number | tr "," "\n" ))
          
              for i in $(seq 0 $((open_prs-1)));
                do
                  declare kombo$i=${pr_repo_url_array[$i]}_${pr_repo_number_array[$i]}
                  declare -n var3=kombo$i
                  combination+=($var3)
                done
              echo "repo0 je: $repo0"
              echo "repo1 je: $repo1"
              echo "repo0 cislo je: $reponr0"
              echo "repo1 cislo je: $reponr1"
               
              printf '%s\n' "${combination[@]}" | jq -R . | jq -s -c . > output.json
              cat output.json
              echo "::set-output name=open_pr_count::${open_prs}"
          else
            echo "No open PRs related to this deployment found, skipping directly to CF update..."
          fi
      - id: set-matrix
        if: steps.search_prs.outputs.open_pr_count > 0
        run: |
          JSON=$(cat ./output.json)
          echo "::set-output name=matrix::${JSON//'%'/'%25'}"
          echo "Output matrix: ${JSON//'%'/'%25'}"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      open_pr_count: ${{ steps.search_prs.outputs.open_pr_count }}

  merge_pull_requests:
    needs: [find_open_pull_requests]
    #if: needs.find_open_pull_requests.result == 'success' && needs.find_open_pull_requests.outputs.open_pr_count > 0
    if: needs.find_open_pull_requests.outputs.open_pr_count > 0
    name: 'Merging PR: ${{ matrix.pr_repo }}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pr_repo: ${{ fromJson(needs.find_open_pull_requests.outputs.matrix) }}
    steps:
      - name: Merge Pull Request
        id: parse_repo
        run: |
          REPO=$(echo ${{ matrix.pr_repo }} | cut -f1 -d"_")
          PR_NUMBER=$(echo ${{ matrix.pr_repo }} | sed 's/^.*_/_/' | tr -d _)
          echo $REPO
          echo $PR_NUMBER
          echo "::set-output name=repository::${REPO}"
          echo "::set-output name=pr_number::${PR_NUMBER}"
      - name: Checkout Configuration repository sources
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.parse_repo.outputs.repository }}
          token: ${{ secrets.JIRA_TOKEN_1808 }}
          fetch-depth: 0
      - name: Merge PR
        run: |
          gh pr merge ${{ steps.parse_repo.outputs.pr_number }} -s --delete-branch

  deploy:
    needs: [prepare-inputs,find_open_pull_requests]
    if: needs.prepare-inputs.outputs.matrix != 'none'
    name: 'Starting deployment for: ${{ matrix.definition.accountName }}/${{ matrix.definition.stackName }}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-inputs.outputs.matrix) }}
    uses: vjancich/shared/.github/workflows/deployment-cfg.yml@main
    with:
      environment: ${{ inputs.environment }}
      account_name: ${{ matrix.definition.accountName }}
      stack_name: ${{ matrix.definition.stackName }}
      PRODUCT_GROUP_NAME: ${{ inputs.PRODUCT_GROUP_NAME }}
    secrets: inherit
