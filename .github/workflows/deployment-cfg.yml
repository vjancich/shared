name: CloudFormation deploy

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        type: string
        required: true
        default: tst
      account_name:
        description: "Name of AWS account for deployment"
        type: string
        required: true
        default: davincicloud-davinciservices
      software_version:
        description: "Software version to deploy"
        type: string
        required: false
      stack_name:
        description: "Stack name of CloudFormation (if not set - project artifactId)"
        type: string
        required: false
      deployment:
        description: "Deployment identification of multiple services on same stage"
        type: string
        required: false
      TEMPLATE_NAME:
        description: "CloudFormation template name (if not set - project artifactId)"
        type: string
        required: false
      PRODUCT_GROUP_NAME:
        description: 'Product group name'
        type: string
        required: true
      DOMAIN:
        description: 'Group of services that are being deployed together'
        type: string
        required: false
      SERVICE:
        description: 'Service name, understood as a set of components with the same lifecycle'
        type: string
        required: false
    secrets:
      DEPLOY_GITHUB_TOKEN:
        required: true
      COR_CICD_AUTOMATION_AWS_ACCESS_KEY_ID:
        required: true
      COR_CICD_AUTOMATION_AWS_SECRET_ACCESS_KEY:
        required: true

env:
  AWS_MAX_ROLE_DURATION_SECONDS: 3600
  SYNC_AUTOMATION_CORE_ROLE_ARN: "arn:aws:iam::288294394121:role/cor-cicd-automation"
  ARTIFACTS_S3_BUCKET: ${{ inputs.PRODUCT_GROUP_NAME }}-artifacts-522044537874
  APP_REPO_SUFFIX: app
  CFG_REPO_SUFFIX: cfg
  AWS_REGION: 'eu-west-1'

jobs:
  prepare-deployment:
    name: "[${{ inputs.environment }}] Application deployment for version: ${{ inputs.software_version }}"
    environment: tst
    runs-on: ubuntu-latest

    steps:
      - name: Identify repo
        id: repo_modi
        run: |
          APPLICATION_NAME=`echo ${{ github.event.repository.name }} | sed 's/-\([a-z]*-java\)//g' | sed 's/-${{ env.CFG_REPO_SUFFIX }}//'`
          echo "::set-output name=application_name::${APPLICATION_NAME}"
          echo "::set-output name=cfg_repo_name::${APPLICATION_NAME}-${{ env.CFG_REPO_SUFFIX }}"
          echo "::set-output name=app_repo_name::${APPLICATION_NAME}-${{ env.APP_REPO_SUFFIX }}"
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          repository: vjancich/${{ steps.repo_modi.outputs.cfg_repo_name }}
          ref: ${{ inputs.environment }}
          token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
      - name: Get version
        id: get_version
        run: |
          # override input / default values with values in deployment.conf if exists
          DEPLOYMENT_CONFIG_FILE=cloudformation/${{ inputs.account_name }}/${{ inputs.stack_name }}/deployment.conf
          if [ -f "$DEPLOYMENT_CONFIG_FILE" ]; then
            echo "Read deployment config from: $DEPLOYMENT_CONFIG_FILE"
            . $DEPLOYMENT_CONFIG_FILE
          fi

          # resolve service version: should be defined either in config or input (not both), no version (meaning latest) is ok for dev or tst only
          if [ -z "${{ inputs.software_version }}" ] && [ -z "$ServiceVersion" ]; then
            if [ "${{ inputs.environment }}" == "dev" ] || [ "${{ inputs.environment }}" == "tst" ]; then
              ServiceVersion=${{ steps.maven_parameters.outputs.software_version }}
            else
              echo "Deployment from branch, resp. latest snapshot deployment, can be done only for dev or test stage"
              exit -1;
            fi
          else
            if [ "${{ inputs.software_version }}" ] && [ "$ServiceVersion" ]; then
              echo "Both ServiceVersion is defined in deployment.conf and software_version set in workflow input, choose one"
              exit -1;
            fi
            if [ -z "$ServiceVersion" ]; then
              ServiceVersion=${{ inputs.software_version }}
            fi
          fi

          echo "::set-output name=Domain::$Domain"
          echo "::set-output name=Service::$Service"
          echo "::set-output name=ServiceVersion::$ServiceVersion"

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          repository: vjancich/${{ steps.repo_modi.outputs.app_repo_name }}
          ref: main
          token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
      - name: Vypis
        run: |
          echo "account je ${{ inputs.account_name }}"
          echo "Temaplte name je ${{ inputs.TEMPLATE_NAME }}"
          echo "software_version je ${{ steps.get_version.outputs.ServiceVersion }}"
          echo "stack_name je ${{ inputs.stack_name }}"
          echo "app name je ${{ steps.repo_modi.outputs.application_name }}"
          echo "cfg repo name je ${{ steps.repo_modi.outputs.cfg_repo_name }}"
          echo "app repo name je ${{ steps.repo_modi.outputs.app_repo_name }}"

  update_deployment_info:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    name: Update the deployment info
    steps:
      - name: Checkout Configuration repository sources
        uses: actions/checkout@v2
        with:
          repository: vjancich/odm-eureka-cfg
          ref: tst
          token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      - name: Update the deployment version
        run: |
          DEPLOY_INFO_FILE=${{ github.workspace }}/cloudformation/${{ inputs.account_name }}/${{ inputs.stack_name }}/deploy.info
          TIME_STAMP="$(date +%R-%d-%m-%Y)"

          if [[ -f "$DEPLOY_INFO_FILE" ]]; then
            rm $DEPLOY_INFO_FILE
          fi

          echo "deployment_version=${{ steps.get_version.outputs.ServiceVersion }}" > $DEPLOY_INFO_FILE
          echo "deployment_time=$TIME_STAMP UTC" >> $DEPLOY_INFO_FILE
          echo "deployment_template=${{ inputs.TEMPLATE_NAME }}" >> $DEPLOY_INFO_FILE
          echo "user=${{ github.actor }}" >> $DEPLOY_INFO_FILE

      - name: Update the README.md
        run: |
          CF_FOLDER=${{ github.workspace }}/cloudformation/

          echo '# Deployment info' > README.md

          for account in $CF_FOLDER*; do
            if [ -d "$account" ]; then
          	  echo "## Account: $(echo $account | awk -F'/' ' { print $(NF) } ')" >> README.md
          	  for stack in $account/*; do
          		if [ -f "$stack/deploy.info" ]; then
          			echo "### Stack: $(echo  $stack | awk -F'/' ' { print $(NF) } ')" >> README.md
          			echo '```' >> README.md
          			cat $stack/deploy.info >> README.md
          			echo '```' >> README.md
          		fi
          	  done
          	  echo "" >> README.md
            fi
          done

      - name: Setup git config
        run: |
          git config user.email "github-svc@ohpen.com"
          git config user.name "GitHub Actions"
      - name: Commit files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
           git add ${{ github.workspace }}/cloudformation/${{ inputs.account_name }}/${{ inputs.stack_name }}/deploy.info
           git add README.md
           git commit -m "[skip ci] Deployed: '${{ inputs.TEMPLATE_NAME }}' with version: '${{ steps.get_version.outputs.ServiceVersion }}' to '${{ inputs.stack_name }}' CF stack"
           git push;
          else
           echo "no change detected";
          fi
